j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=0.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88, 11.82,23.55 );
sigma <- 33.18;
n <- c(13, 11, 10, 10, 16);
pad <- 0.01;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88 );
sigma <- 33.18;
n <- c(13, 11, 10);
pad <- 0.05;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:3)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88 );
sigma <- 33.18;
n <- c(13, 11, 10);
pad <- 0.05;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:3,n)
xlim <- c(0,6);
windows(width=7,height=7,pointsize=12)
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:3)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88, 11.82,23.55 );
sigma <- 1;
n <- c(13, 11, 10, 10, 16);
pad <- 0.01;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
### Figure on Page C.3
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88, 11.82,23.55 );
sigma <- 1;
n <- c(13, 11, 10, 10, 16);
pad <- 0.05;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-3,3,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88, 11.82,23.55 );
sigma <- 1;
n <- c(13, 11, 10, 10, 16);
pad <- 0.05;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-10,25,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
mu <- 75.18; alpha <- c(-7.82,16.91,-2.88, 11.82,23.55 );
sigma <- 33;
n <- c(13, 11, 10, 10, 16);
pad <- 0.05;
npoints <- 101
y <- mu + rep(alpha,n) + rnorm(sum(n), 0, sigma)
x <- rep(1:5,n)
xlim <- c(0,6);
ylim <- min(y) + c(-0.2,1.2)*(max(y)-min(y))
windows(width=7,height=7,pointsize=12)
plot(  x,y, xlim=xlim, xaxt="n", ylim=ylim, yaxt="n",
xlab='shop_type',pch=21,ylab='',bg=rgb(0,0.75,0,0.3),
main="One-Way ANOVA Model with Samples" )
axis(1, at=1:5)
box()
mtext( side=3, line=0.3, text='(k = 5)' )
mtext( side=2, line=1.5, text='startup cost' )
abline(h=mu,lty=3,col='red')
text(par('usr')[1], mu, pos=4,
labels=expression(mu))
y <- sigma * seq(-10,25,length=npoints)
x <- dnorm(y, 0, sigma) + pad
par(xpd=NA)
for(j in 1:5) {
lines(-x+j, y+mu+alpha[j], col='blue', lwd=2)
segments(j-pad, y[1]+mu+alpha[j],
j-pad, y[npoints]+mu+alpha[j], col=rgb(0,0,0.75,0.3))
segments(j-pad, mu+alpha[j],
-dnorm(0,0,sigma)+j-pad, mu+alpha[j], col='blue', lty=3,lwd=0)
text( -dnorm(0,0,sigma)+j-pad, mu+alpha[j], pos=2, offset=.2,
labels=as.expression(  substitute( mu[a]==mu+alpha[a],
list(a=j) )  )    )
}
shiny::runApp('R/breanna')
shiny::runApp('R/breanna')
?text
shiny::runApp('R/breanna')
shiny::runApp('R/breanna')
?set.seed
shiny::runApp('R/breanna')
q()
install.packages("htmlwidgets")
library(htmlwidgets)
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
anscombe
par(mfrow(2,2))
?mfrow
??mfrow
par(mfrow(c(2,2)))
par(mfrow=c(2,2))
plot(y1~x1, y2~x2, y3~x3, y4~x4)
windows(5,5)
par(mfrow=c(2,2))
plot(y1~x1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(anscombe, aes(x1, y1)) + geom_point() +
geom_smooth(method = lm, fullrange = TRUE, shape = 21, color = "black")
ggplot(anscombe, aes(x1, y1)) + geom_point() +
geom_smooth(method = lm, fullrange = F , shape = 21, color = "black")
shiny::runApp('R/regression')
?summary
shiny::runApp('R/regression')
q()
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
?xor
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
q()
str(mtcars)
shiny::runApp('R/regression')
colnames(mtcars)<- c("Miles/Gallon", "Num of Cylinders", "Displacement(cu.in.)",
"Gross Horsepower", "Rear Axle Ratio", "Weight (lb/1000)",
"1/4 Mile Time", "V/S", "Transmission", "Num Forward Gears",
"Num Carburetors")
mtcars
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
q()
str(mtcars)
shiny::runApp('R/regression')
names(mtcars)
shiny::runApp('R/regression')
shiny::runApp('R/regression')
ggplot(mtcars,aes_(cyl, mpg)) + geom_boxplot()
ggplot(mtcars,aes(cyl, mpg)) + geom_boxplot()
ggplot(mtcars,aes(am, mpg)) + geom_boxplot()
mtcars$cyl<-factor(mtcars$cyl)
ggplot(mtcars,aes(am, mpg)) + geom_boxplot()
ggplot(mtcars,aes(factor(am), mpg)) + geom_boxplot()
as.factor(cyl)
as.factor(mtcars$cyl)
class(cyl)
class(mtcars$cyl)
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
library()
shiny::runApp('R/regression')
shiny::runApp('R/regression')
class(mtcars$am)
mtcars$am<-factor(mtcars$am)
class(mtcars$am)
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
?boxplot
shiny::runApp('R/regression')
boxplot(
lapply(
split(keep, as.factor(mtcars$cyl)),mtcars$mpg))
boxplot(
lapply(
split(keep, as.factor(mtcars$cyl))~mtcars$mpg))
boxplot(
lapply(
as.factor(mtcars$cyl))~mtcars$mpg)
boxplot(formula=mtcars$cyl~mtcars$mpg)
boxplot(formula=mtcars$mpg~mtcars$cyl)
shiny::runApp('R/regression')
shiny::runApp('R/regression')
?geom_dotplot
ggplot(mtcars,aes(factor(am), mpg)) + geom_dotplot()
ggplot(mtcars,aes(factor(am), mpg)) + geom_violin()
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
shiny::runApp('R/regression')
windows(5,5)
p1<-ggplot(anscombe, aes(x1, y1)) + geom_point(color="firebrick") +
geom_smooth(method = lm, fullrange = TRUE , shape = 21, color = "black")
p2<-ggplot(anscombe, aes(x2, y2)) + geom_point(color="olivedrab") +
geom_smooth(method = lm, fullrange = TRUE , shape = 21, color = "black")
p3<-ggplot(anscombe, aes(x3, y3)) + geom_point(color="firebrick") +
geom_smooth(method = lm, fullrange = TRUE , shape = 21, color = "black")
p4<-ggplot(anscombe, aes(x4, y4)) + geom_point(color="olivedrab") +
geom_smooth(method = lm, fullrange = TRUE , shape = 21, color = "black")
grid.arrange(p1,p2, p4, p3, ncol=2)
library(gridExtra)
grid.arrange(p1,p2, p4, p3, ncol=2)
q()
?mar
??mar
op <- par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5, font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
yhigh <- 1
xlow  <- -3
xhigh <- 3
postmean <- 0.5
postsd   <- 0.8
priormean <- 0
priorsd  <- 1
plot ( function( x ) dnorm( x, mean=postmean,sd=postsd), xlow, xhigh, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lwd=2, lty=1, ylab="", xlab="", main="Inference for Mu", axes=F)
lines(c(0,0),c(0,1.25), lwd=2, col="grey")
par(new=T)
plot ( function( x ) dnorm( x, mean=priormean,sd=priorsd ), xlow, xhigh, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lwd=2, lty=2, ylab="", xlab="", axes=F)
lines(c(2,0),c(-2,3))
?lines
lines(c(2,0),c(-2,3), type=h)
lines(c(2,0),c(-2,3), type="h")
lines(c(2,0),c(-2,0), type="h")
lines(c(0,0),c(4,5), type="h")
plot ( function( x ) dnorm( x, mean=postmean,sd=postsd), xlow, xhigh, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lwd=2, lty=1, ylab="", xlab="", main="Inference for Mu", axes=F)
lines(c(0,0),c(0,1.25), lwd=2, col="grey")
lines(c(0,0),c(4,5))
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
q()
shiny::runApp('R/dist')
shiny::runApp('R/dist')
args(plot)
?plot
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
?dnorm
yhigh <- 1
xlow  <- -3
xhigh <- 3
postmean <- 0.5
postsd   <- 0.8
priormean <- 0
priorsd  <- 1
plot ( function( x ) dnorm( x, mean=postmean,sd=postsd), xlow, xhigh, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lwd=2, lty=1, ylab="", xlab="", main="Inference for Mu", axes=F)
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
q()
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
par(new?)
par(?new)
new?
)
?new
?new
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shiny::runApp('R/dist')
shinyapps::setAccountInfo(name='dan2160coursepack', token='AAF54AF30EA363AE39B75C1E15F3EC5B', secret='UT9xWZSTRDuG0zF7LxqI7+zJR/OkcCaQzD1JEfhA')
shinyapps::deployApp()
getwd()
setwd("~/R/dist")
shinyapps::deployApp()
q()
